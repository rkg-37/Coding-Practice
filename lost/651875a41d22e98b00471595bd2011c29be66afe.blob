// Input: nums = [1,2,3,4,5,6,7], k = 3
// Output: [5,6,7,1,2,3,4]
// Explanation:
// rotate 1 steps to the right: [7,1,2,3,4,5,6]
// rotate 2 steps to the right: [6,7,1,2,3,4,5]
// rotate 3 steps to the right: [5,6,7,1,2,3,4]

import java.util.*;
import java.lang.*;
public class rotateArray{

    // TIME COMPLEXITY : O(N)
    // SPACE COMPLEXITY : O(N)
    public static void rotate(int[] nums, int k) {
        int num[]=new int[nums.length];
        k=k%nums.length;int j=0;
        for(int i=nums.length-k;i<nums.length;i++){
            num[j]=nums[i];
            j++;
        }
        for(int i=0;i<nums.length-k;i++){
            num[j]=nums[i];
            j++;
        }
        for(int i=0;i<nums.length;i++){
            nums[i]=num[i];
        }
        System.out.println(Arrays.toString(nums));
    }

    public static void rotate2(int[] nums, int k) {
        int n = nums.length;
        k = k%n;
        reverse(nums , 0 , n-1);
        reverse(nums , 0 , k-1);
        reverse(nums , k , n-1);
        System.out.println(Arrays.toString(nums));
     }
    
    public static void reverse(int[] arr , int start , int end){
        while(start<end){
            int temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            start++;
            end--;
        }
    }

    public static void main(String[] args){
        Scanner s = new Scanner(System.in);
        int n = s.nextInt();
        int[] nums=new int[n];
        for(int i=0;i<n;i++)
            nums[i] = s.nextInt();
        int k = s.nextInt();
        rotate(nums,k);
        n = s.nextInt();
        int[] num=new int[n];
        for(int i=0;i<n;i++)
            num[i] = s.nextInt();
        k = s.nextInt();
        rotate2(num,k);
    }
}