import java.util.*;
import java.lang.*;
public class longest_subarray_with_sum_k{
    public static int lenOfLongSubarr2(int A[], int N, int K) {
        //Complete the function
        int i = 0, j = 0, sum = 0;
       int maxLen = Integer.MIN_VALUE;
        while (j < N) {
            sum += A[j];
            if (sum < K) {
                j++;
            }
            else if (sum == K) {
                maxLen = Math.max(maxLen, j-i+1);
                j++;
            }else if (sum > K) {
                while (sum > K) {
                    sum -= A[i];
                    i++;
                }
                if(sum == K){
                    maxLen = Math.max(maxLen, j-i+1);
                }
                j++;
            }
        }
        return maxLen;        
    }

    // hashmap approach 
    // public static int lenOfLongSubarr (int A[], int n, int k) {
    //     //Complete the function
    //     HashMap<Integer,Integer> map = new HashMap<>();
    //     int sum = 0;
    //     int max=Integer.MIN_VALUE,len=0;
    //     for(int i=0;i<n;i++){
    //         sum+=A[i];
            
    //         if(sum==k)
    //             max = i+1;

    //         if(!map.containsKey(sum)){
    //             map.put(sum,i);
    //         }
    //         if(map.containsKey(sum-k)){
    //             len = map.get(sum-k);
    //             if(max<(i-len))
    //                 max = i-len;
    //         }

    //     }
    //     System.out.println(map);
    //     return max;
    // }

    public static void main(String[] args){
        Scanner s = new Scanner(System.in);
        int n = s.nextInt();
        int k = s.nextInt();
        int[] A = new int[n];
        for(int i=0;i<n;i++)
            A[i] = s.nextInt();

        // System.out.println(lenOfLongSubarr(A,n,k));
        System.out.println(lenOfLongSubarr2(A,n,k));
    }
}